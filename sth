import sys
import concurrent.futures
from PyQt6.QtWidgets import QMainWindow, QApplication, QWidget, QVBoxLayout, QLineEdit, QPushButton, QCheckBox, QLabel, QHBoxLayout, QTextEdit, QSpinBox
from PyQt6.QtCore import QThread, pyqtSignal, QObject
from .widgets import create_count_groupbox, create_draw_groupbox
from Logic.count_problem import count_numbers
from Logic.draw_problem import process_draw_problem

class Worker(QObject):
    finished = pyqtSignal()
    result_ready = pyqtSignal(int, list)

    def __init__(self, start, end, tag_list, conditions):
        super().__init__()
        self.start = start
        self.end = end
        self.tag_list = tag_list
        self.conditions = conditions

    def run(self):
        result, card_list = process_draw_problem(self.start, self.end, self.tag_list, self.conditions)
        self.result_ready.emit(result, card_list)
        self.finished.emit()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Bài Toán Đếm Số & Rút Thẻ")
        self.resize(620, 700)
        self.setup_ui()

    def setup_ui(self):
        main_layout = QVBoxLayout(self)
        
        # Tạo các widget từ widgets.py
        self.count_groupbox = create_count_groupbox()
        main_layout.addWidget(self.count_groupbox)
        self.draw_groupbox = create_draw_groupbox()
        main_layout.addWidget(self.draw_groupbox)

        # Tạo kết quả hiển thị
        self.result_display = self.create_result_display()
        main_layout.addLayout(self.result_display)

        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

        # Truy xuất và lưu trữ các widget cụ thể
        self.input_numbers = self.count_groupbox.findChild(QLineEdit, "input_numbers")
        self.checkbox_input_k_digits = self.count_groupbox.findChild(QCheckBox, "checkbox_input_k_digits")
        self.input_k_digits = self.count_groupbox.findChild(QLineEdit, "input_k_digits")
        self.checkbox_starts_by = self.count_groupbox.findChild(QCheckBox, "checkbox_starts_by")
        self.input_starts_by = self.count_groupbox.findChild(QLineEdit, "starts_input")
        self.checkbox_not_starts_by = self.count_groupbox.findChild(QCheckBox, "checkbox_not_starts_by")
        self.input_not_starts_by = self.count_groupbox.findChild(QLineEdit, "not_starts_input")
        self.checkbox_not_includes_by = self.count_groupbox.findChild(QCheckBox, "checkbox_not_includes_by")
        self.input_not_includes_by = self.count_groupbox.findChild(QLineEdit, "not_includes_input")
        self.input_divisible_by = self.count_groupbox.findChild(QLineEdit, "divisible_input")
        self.checkbox_divisible_by = self.count_groupbox.findChild(QCheckBox, "checkbox_divisible_by")
        self.input_ends_by = self.count_groupbox.findChild(QLineEdit, "ends_input")
        self.checkbox_ends_by = self.count_groupbox.findChild(QCheckBox, "checkbox_ends_by")
        self.input_bigger_than = self.count_groupbox.findChild(QLineEdit, "bigger_than_input")
        self.checkbox_bigger_than = self.count_groupbox.findChild(QCheckBox, "checkbox_bigger_than")
        self.input_is_k_digits = self.count_groupbox.findChild(QLineEdit, "is_k_digits_input")
        self.checkbox_is_k_digits = self.count_groupbox.findChild(QCheckBox, "checkbox_is_k_digits")
        self.even_checkbox = self.count_groupbox.findChild(QCheckBox, "even_checkbox")
        self.odd_checkbox = self.count_groupbox.findChild(QCheckBox, "odd_checkbox")
        self.all_diff_checkbox = self.count_groupbox.findChild(QCheckBox, "all_different")

        self.input_cards = self.draw_groupbox.findChild(QLineEdit, "input_cards")
        self.input_start_at = self.draw_groupbox.findChild(QSpinBox, "start_at_input")
        self.input_end_at = self.draw_groupbox.findChild(QSpinBox, "end_at_input")
        self.checkbox_drawn = self.draw_groupbox.findChild(QCheckBox, "checkbox_input_drawn")
        self.input_drawn = self.draw_groupbox.findChild(QLineEdit, "input_drawn")
        self.checkbox_even = self.draw_groupbox.findChild(QCheckBox, "checkbox_input_even")
        self.input_even = self.draw_groupbox.findChild(QLineEdit, "input_even")
        self.checkbox_sum_divisible = self.draw_groupbox.findChild(QCheckBox, "checkbox_input_sum_divi")
        self.input_sum_divi = self.draw_groupbox.findChild(QLineEdit, "input_sum_divi")
        self.checkbox_product_divisible = self.draw_groupbox.findChild(QCheckBox, "checkbox_input_product_divi")
        self.input_product_divi = self.draw_groupbox.findChild(QLineEdit, "input_product_divi")

        # Lấy nút tính toán và kết nối với hàm xử lý
        calculate_button = self.count_groupbox.findChild(QPushButton, "calculate_button")
        calculate_button1 = self.draw_groupbox.findChild(QPushButton, "calculate_button1")

        # Kết nối sự kiện
        calculate_button.clicked.connect(self.handle_calculation)
        calculate_button1.clicked.connect(self.handle_drawcard_calculation)

    def create_result_display(self):
        layout = QVBoxLayout()
        self.result_output = QTextEdit()
        self.result_output.setReadOnly(True)
        self.result_output.setObjectName("result_output")

        layout.addWidget(self.result_output, 1)
        return layout

    def handle_calculation(self):
        input_digits = self.input_numbers.text().replace(',', '') 

        conditions = {
            'has_k_digits': self.input_k_digits.text() if self.checkbox_input_k_digits.isChecked() else None,
            'divisible_by': self.input_divisible_by.text() if self.checkbox_divisible_by.isChecked() else None,
            'starts_by': self.input_starts_by.text() if self.checkbox_starts_by.isChecked() else None,
            'not_starts_by': self.input_not_starts_by.text() if self.checkbox_not_starts_by.isChecked() else None,
            'not_includes_by': self.input_not_includes_by.text() if self.checkbox_not_includes_by.isChecked() else None,
            'ends_by': self.input_ends_by.text() if self.checkbox_ends_by.isChecked() else None,
            'bigger_than': self.input_bigger_than.text() if self.checkbox_bigger_than.isChecked() else None,
            'is_k_digits': self.input_is_k_digits.text() if self.checkbox_is_k_digits.isChecked() else None,
            'is_even': self.even_checkbox.isChecked(),
            'is_odd': self.odd_checkbox.isChecked(),
            'all_different': self.all_diff_checkbox.isChecked()
        }
        print(f"Digits: {input_digits}")
        print(f"Conditions: {conditions}")

        if self.checkbox_input_k_digits.isChecked():
            try:
                has_k_digits = int(self.input_k_digits.text())
                conditions['has_k_digits'] = has_k_digits
                print(f"Has k digits: {has_k_digits}")
            except ValueError:
                print("Invalid number of digits input.")

        if self.checkbox_starts_by.isChecked():
            starts_by = self.input_starts_by.text()
            conditions['starts_by'] = starts_by
            print(f"Starts by: {starts_by}")

        if self.checkbox_not_starts_by.isChecked():
            not_starts_by = self.input_not_starts_by.text()
            conditions['not_starts_by'] = not_starts_by
            print(f"Not starts by: {not_starts_by}")
        
        if self.checkbox_not_includes_by.isChecked():
            not_includes_by = self.input_not_includes_by
            print(f"Not includes by: {not_includes_by}")

        if self.checkbox_divisible_by.isChecked():
            divisible_by = self.input_divisible_by.text()
            conditions['divisible_by'] = divisible_by
            print(f"Divisible by: {divisible_by}")

        if self.checkbox_ends_by.isChecked():
            ends_by = int(self.input_ends_by.text())
            conditions['ends_by'] = ends_by
            print(f"Ends by: {ends_by}")

        if self.checkbox_bigger_than.isChecked():
            bigger_than = int(self.input_bigger_than.text())
            conditions['bigger_than'] = bigger_than
            print(f"Bigger than: {bigger_than}")

        if self.checkbox_is_k_digits.isChecked():
            is_k_digits = self.input_is_k_digits.text()
            conditions['is_k_digits'] = is_k_digits
            print(f"Is k digits: {is_k_digits}")

        result, number_list = count_numbers(input_digits, conditions)

        display_text = f"Số lượng số thỏa mãn: {result}\n" + ", ".join(number_list)
        self.result_output.setText(display_text)

    def handle_drawcard_calculation(self):
        input_tag_list = self.input_cards.text() if self.input_cards.text() else None

        conditions1 = {
            'drawn_cards': int(self.input_drawn.text()) if self.input_drawn.text() else None,
            'num_even': int(self.input_even.text()) if self.input_even.text() else None,
            'sum_divi': self.input_sum_divi.text() if self.input_sum_divi.text() else None,
            'pro_divi': self.input_product_divi.text() if self.input_product_divi.text() else None
            }
        
        start = int(self.input_start_at.text()) if self.input_start_at.text() else None
        end = int(self.input_end_at.text()) if self.input_end_at.text() else None

        # if self.checkbox_drawn.isChecked():
        #     drawn_cards = int(self.input_drawn.text())
        #     conditions1['drawn_cards'] = drawn_cards

        # if self.checkbox_even.isChecked():
        #     num_even = int(self.input_even.text())
        #     conditions1['num_even'] = num_even

        # if self.checkbox_sum_divisible.isChecked():
        #     sum_divi = self.input_sum_divi.text()
        #     conditions1['sum_divi'] = sum_divi

        # if self.checkbox_product_divisible.isChecked():
        #     pro_divi = self.input_product_divi.text()
        #     conditions1['pro_divi'] = pro_divi

        print(f"Conditions1: {conditions1}")

        
        # if input_tag_list:
        #     result, card_list = process_draw_problem(None, None, input_tag_list, conditions1)
        # else:
        #     result, card_list = process_draw_problem(start, end, None, conditions1)

        self.thread = QThread()
        self.worker = Worker(start, end, input_tag_list, conditions1)
        self.worker.moveToThread(self.thread)
        self.thread.started.connect(self.worker.run)
        self.worker.finished.connect(self.thread.quit)
        self.worker.finished.connect(self.worker.deleteLater)
        self.thread.finished.connect(self.thread.deleteLater)
        self.worker.result_ready.connect(self.display_result)

        self.thread.start()

        # result, card_list = count_cards(int(self.input_start_at.text()), int(self.input_end_at.text()), input_tag_list, conditions1)

        # def format_card_list(card_list, max_line_length=120):
        #     lines = []
        #     current_line = ""
        #     for card in card_list:
        #         card_str = str(card)
        #         if len(current_line) + len(card_str) + 2 > max_line_length:  # +2 for ", "
        #             lines.append(current_line)
        #             current_line = card_str
        #         else:
        #             if current_line:
        #                 current_line += ", " + card_str
        #             else:
        #                 current_line = card_str
        #     if current_line:
        #         lines.append(current_line)
        #     return "\n".join(lines)

        # # Sử dụng hàm này để định dạng chuỗi kết quả
        # result, card_list = process_draw_problem(int(self.input_start_at.text()), int(self.input_end_at.text()), input_tag_list, conditions1)
        # formatted_card_list = format_card_list(card_list)
        # display_text = f"Số lượng thẻ thỏa mãn: {result}\n[" + formatted_card_list + "]"
        # self.result_output.setText(display_text)

        def format_card_list(card_list, max_line_length=120):
            lines = []
            current_line = ""
            for card in card_list:
                card_str = str(card)
                if len(current_line) + len(card_str) + 2 > max_line_length:  # +2 for ", "
                    lines.append(current_line)
                    current_line = card_str
                else:
                    if current_line:
                        current_line += ", " + card_str
                    else:
                        current_line = card_str
            if current_line:
                lines.append(current_line)
            return "\n".join(lines)

        # Sử dụng hàm này để định dạng chuỗi kết quả
        result, card_list = process_draw_problem(int(self.input_start_at.text()), int(self.input_end_at.text()), input_tag_list, conditions1)
        formatted_card_list = format_card_list(card_list)
        return result, formatted_card_list

    def display_result(self, result, formatted_card_list):
        # Sử dụng hàm này để định dạng chuỗi kết quả
        display_text = f"Số lượng thẻ thỏa mãn: {result}\n[" + " ".join(map(str, formatted_card_list)) + "]"
        self.result_output.setText(display_text)


if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec()
